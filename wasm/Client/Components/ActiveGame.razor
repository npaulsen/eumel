@using EumelCore
@namespace EumelBlazor.Components
<div>
    <div class="alert alert-light text-center" role="alert">
        @if (State.Turn.IsRoundOver)
        {
            <p>Round over. </p>
            <p>
                <button type="button" class="btn btn-outline-dark" @onclick="OnStartRound">Start next round</button>
            </p>
        }
        else if (State.Turn.IsGuess || State.Turn.IsPlay)
        {
            <p>Waiting for
                @if (State.Turn.IsGuess)
                {
                    <span class="badge badge-info">guess</span>
                }
                else
                {
                    <span class="badge badge-info">card</span>
                }
                of <span class="badge badge-secondary">@PlayerNames[State.Turn.PlayerIndex]</span>
            </p>
            @if (CanGuess)
            {
                <p>
                    <GuessInput State="@State.Players" OnGiveGuess="@OnGiveGuess" />
                </p>
            }
        }
    </div>
    <PlayersState PlayerNames="@PlayerNames" State="@State" />
    <CurrentTrick Trick="@State.CurrentTrick" PlayerNames="@PlayerNames" />
    <OwnHand Hand="@PlayersHand" OnCardClicked="@OnPlayCard" IsTurn="@CanPlay" />
</div>
@code {
    [Parameter]
    public GameState State { get; set; }

    [Parameter]
    public List<string> PlayerNames { get; set; }

    [Parameter]
    public int ActivePlayer { get; set; }

    [Parameter]
    public EventCallback OnStartRound { get; set; }

    [Parameter]
    public EventCallback<Card> OnPlayCard { get; set; }

    [Parameter]
    public EventCallback<int> OnGiveGuess { get; set; }

    private Hand PlayersHand;
    private bool CanGuess;
    private bool CanPlay;

    protected override void OnParametersSet()
    {
        PlayersHand = State.Players[ActivePlayer].Hand;
        var myTurn = State.Turn.PlayerIndex == ActivePlayer;
        CanGuess = State.Turn.IsGuess && myTurn;
        CanPlay = State.Turn.IsPlay && myTurn; 
        base.OnParametersSet();
    }

}