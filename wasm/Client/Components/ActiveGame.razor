@using EumelCore
@namespace EumelBlazor.Components
<div>
    <div class="alert alert-light text-center" role="alert">
        @if (State.Turn.IsRoundOver)
        {
            <p>Round over. </p>
            <p>
                <button type="button" class="btn btn-outline-dark" @onclick="OnShowScores">View scoreboard</button>
                <button type="button" class="btn btn-outline-dark" @onclick="OnStartRound">Start next round</button>
            </p>
        }
        else if (CanGuess)
        {
            <GuessInput State="@State.Players" OnGiveGuess="@OnGiveGuess" />
        }
    </div>
    <CurrentTrick Trick="@LastTrickState" PlayerNames="@PlayerNames" />
    <OwnHand Hand="@PlayersHand" OnCardClicked="@OnPlayCard" IsTurn="@CanPlay" />
    <PlayersState PlayerNames="@PlayerNames" State="@State" />
</div>
@code {
    [Parameter]
    public GameState State { get; set; }

    [Parameter]
    public List<string> PlayerNames { get; set; }

    [Parameter]
    public int ActivePlayer { get; set; }

    [Parameter]
    public EventCallback OnStartRound { get; set; }

    [Parameter]
    public EventCallback<Card> OnPlayCard { get; set; }

    [Parameter]
    public EventCallback<int> OnGiveGuess { get; set; }

    // HACK
    [CascadingParameter]
    private MainMenu Parent { get; set; }

    public void OnShowScores()
    {
        if (Parent == null)
        {
            System.Console.WriteLine("no parent mainmenu found for routing");
        }
        Parent.ActivatePageById("scores");
    }


    private Hand PlayersHand;
    private bool CanGuess;
    private bool CanPlay;

    private TrickState LastTrickState;

    protected override void OnParametersSet()
    {
        SetLastTrickState();
        var isPlayer = ActivePlayer >= 0 && ActivePlayer < State.Players.Count;
        PlayersHand = isPlayer ? State.Players[ActivePlayer].Hand : null;
        var myTurn = isPlayer && State.Turn.PlayerIndex == ActivePlayer;
        CanGuess = State.Turn.IsGuess && myTurn;
        CanPlay = State.Turn.IsPlay && myTurn;
        base.OnParametersSet();
    }

    private void SetLastTrickState()
    {
        var nextRoundAlready = State.Turn.IsGuess || State.Turn.IsPreparing;
        if (nextRoundAlready || State.CurrentTrick.AnyPlayed)
        {
            LastTrickState = State.CurrentTrick;
        }
    }
}