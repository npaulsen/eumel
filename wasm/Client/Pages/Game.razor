@page "/"
@using EumelCore.GameSeriesEvents
@using Microsoft.AspNetCore.SignalR.Client
@using EumelCore
@using BlazorSignalRApp.Shared.HubInterface
@using wasm.Client.Pages
@inject NavigationManager NavigationManager
@implements IDisposable

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Move:
        <input type="number" @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="MakeGuess" disabled="@(!CanGuess)">Guess</button>
<button @onclick="PlayCard" disabled="@(!CanPlay)">Play</button>
<button @onclick="StartNextRound" disabled="@(!IsConnected)">Start next round</button>

<hr>
@if (State != null)
{
    <div>
        @foreach (var p in State.Players)
        {
            @playerNames[p.PlayerIndex]
            @p
        }
        </div>
    @State.Turn.NextEventType
    @State.Turn.PlayerIndex.Value
}
    <ul id="messagesList">
        @foreach (var e in seriesEvents)
    {
        <li>@e</li>
    }
</ul>
<ul id="messagesList">
    @foreach (var e in events)
    {
        <li>@e</li>
    }
    @State
</ul>

@code {
    private wasm.Client.Pages.GameClient client;
    private List<GameSeriesEvent> seriesEvents = new List<GameSeriesEvent>();
    private List<GameEvent> events = new List<GameEvent>();

    private List<string> playerNames;
    private string userInput;
    private string messageInput;
    private GameState State;

    private bool CanGuess => IsConnected && State?.Turn != null && State.Turn.NextEventType == typeof(GuessGiven) &&
        State.Turn.PlayerIndex == 2;
    private bool CanPlay => IsConnected && State?.Turn != null && State.Turn.NextEventType == typeof(CardPlayed) &&
        State.Turn.PlayerIndex == 2;


    protected override async Task OnInitializedAsync()
    {
        System.Console.WriteLine("Initializing game client");
        client = new GameClient(DispatchGameSeriesEvent, DispatchGameEvent);
        await client.StartAsync();
    }
    public void InitGameState(int numPlayers, EumelRoundSettings settings)
    {
        State = GameState.Initial(numPlayers, settings);
        StateHasChanged();
    }

    public void DispatchGameSeriesEvent(GameSeriesEvent e)
    {
        seriesEvents.Add(e);
        if (e is GameSeriesStarted gameSeries)
        {
            playerNames = gameSeries.PlayerNames.ToList();
            events.Clear();
        }
        else if (e is RoundStarted round)
        {
            State = GameState.Initial(playerNames.Count, round.Settings);
            events.Clear();
        }

        StateHasChanged();
    }
    public void DispatchGameEvent(GameEvent e)
    {
        System.Console.WriteLine("Dispatching " + e);
        events.Add(e);
        State = State.Dispatch(e);
        StateHasChanged();
    }

    public Task PlayCard() => client.PlayCard(State.Players[2].Hand[0]);
    public Task MakeGuess() => client.MakeGuess(int.Parse(messageInput));
    public Task StartNextRound() => client.StartNextRound();

    public bool IsConnected =>
        client.ConnectionState == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = client.DisposeAsync();
    }
}