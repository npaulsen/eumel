@page "/"
@using EumelCore.GameSeriesEvents
@using Microsoft.AspNetCore.SignalR.Client
@using EumelCore
@using BlazorSignalRApp.Shared.HubInterface
@using wasm.Client.Pages
@using EumelBlazor.Components
@inject NavigationManager NavigationManager
@implements IDisposable

@if (State != null)
{
    <div class="alert alert-secondary text-center" role="alert">
        @if (State.Turn.IsRoundOver)
        {
            <p>Round over. </p>
            <p>
                <button type="button" class="btn btn-outline-dark" @onclick="StartNextRoundAsync">Start next round</button>
            </p>
        }
        else if (State.Turn.IsGuess || State.Turn.IsPlay)
        {
            <p>Waiting for
                @if (State.Turn.IsGuess)
                {
                    <span class="badge badge-info">guess</span>
                }
                else
                {
                    <span class="badge badge-info">card</span>
                }
                of <span class="badge badge-secondary">@playerNames[State.Turn.PlayerIndex]</span>
            </p>
            @if (CanGuess)
            {
                <p>
                    <div class="form-inline">
                        <div class="form-group">
                            <label>
                                <input type="number" class="form-control" @bind="messageInput" size="50" />
                            </label>
                        </div>
                        <button class="btn btn-outline-dark" @onclick="MakeGuessAsync" disabled="@(!CanGuess)">Guess</button>
                    </div>
                </p>
            }
        }
    </div>
    <div class="row">
        @foreach (var p in State.Players)
        {
            <div class="col-sm-2">
                <div class="card text-center @(State.Turn.PlayerIndex == p.PlayerIndex?"border-dark":"")" style="width: 12rem;">
                    <div class="card-body">
                        <h5 class="card-title">
                            <span class="badge">@playerNames[p.PlayerIndex]</span>
                        </h5>
                        <p class="card-text">@p.TricksWon / <span
                            class="badge badge-secondary lg">@(p.Guess?.ToString()??"?")</span></p>
                    </div>
                </div>
            </div>
        }
    </div>
    <CurrentTrick Trick="@State.CurrentTrick" PlayerNames="@playerNames" />
    <OwnHand Hand="@ownHand" OnCardClicked="@PlayCardAsync" />
}
else
{
    <button type="button" class="btn btn-outline-dark" @onclick="StartNextRoundAsync">Start first round</button>
}
<GameSeriesLog Events="@seriesEvents" />
<ul id="messagesList">
    @foreach (var e in events)
    {
        <li>@e</li>
    }
</ul>

@code {
    private wasm.Client.Pages.GameClient client;
    private List<GameSeriesEvent> seriesEvents = new List<GameSeriesEvent>();
    private List<GameEvent> events = new List<GameEvent>();

    private List<string> playerNames;
    private string userInput;
    private string messageInput;
    private GameState State;

    private Hand ownHand => State.Players[client.PlayerIndex].Hand;

    private bool CanGuess => IsConnected && State?.Turn != null && State.Turn.NextEventType == typeof(GuessGiven) &&
        State.Turn.PlayerIndex == 2;
    private bool CanPlay => IsConnected && State?.Turn != null && State.Turn.NextEventType == typeof(CardPlayed) &&
        State.Turn.PlayerIndex == 2;


    protected override async Task OnInitializedAsync()
    {
        System.Console.WriteLine("Initializing game client");
        client = new GameClient(DispatchGameSeriesEvent, DispatchGameEvent);
        await client.StartAsync();
    }
    public void InitGameState(int numPlayers, EumelRoundSettings settings)
    {
        State = GameState.Initial(numPlayers, settings);
        StateHasChanged();
    }

    public void DispatchGameSeriesEvent(GameSeriesEvent e)
    {
        seriesEvents.Add(e);
        if (e is GameSeriesStarted gameSeries)
        {
            playerNames = gameSeries.PlayerNames.ToList();
            events.Clear();
        }
        else if (e is RoundStarted round)
        {
            State = GameState.Initial(playerNames.Count, round.Settings);
            events.Clear();
        }

        StateHasChanged();
    }
    public void DispatchGameEvent(GameEvent e)
    {
        System.Console.WriteLine("Dispatching " + e);
        events.Add(e);
        State = State.Dispatch(e);
        StateHasChanged();
    }

    public Task PlayCardAsync(Card c) => client.PlayCard(c);
    public Task MakeGuessAsync() => client.MakeGuess(int.Parse(messageInput));
    public Task StartNextRoundAsync() => client.StartNextRound();

    public bool IsConnected =>
        client.ConnectionState == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = client.DisposeAsync();
    }
}