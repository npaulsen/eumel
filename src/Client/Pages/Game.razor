@page "/{roomName}/{playerIndex:int}"
@using Eumel.Core.GameSeriesEvents
@using Eumel.Core
@using Eumel.Client.Services
@using Eumel.Client.Components
@using Eumel.Shared.HubInterface;
@inject NavigationManager NavigationManager
@implements IDisposable

<MainMenu>
    <CustomStatus>
        <ConnectionSymbol CurrentConnectionState=connectionState OnTryReconnect=TryReconnect/>
    </CustomStatus>
    <Pages>
        <SubPage Title="Play" Id="current-game" Icon="heart">
            @if (!players.Any())
            {
                <LobbyLoadingIndicator RoomName=@RoomName />
            }
            else if (State is null)
            {
                <PreparedLobby Players=players RoomName=@RoomName OnStartClicked=StartRoundAsync />
            }
            else
            {
                <ActiveGame State=State Players=players ActivePlayer=client.PlayerIndex
                OnStartRound=StartRoundAsync OnPlayCard=PlayCardAsync OnGiveGuess=MakeGuessAsync
                IsLastRound=isLastRound />
            }
        </SubPage>
        <SubPage Title="Leaderboard" Id="leaderboard" Icon="badge">
            <LeaderBoard Events=seriesEvents IsRoundRunning=IsRoundRunning OnStartNextRound=StartRoundAsync />
        </SubPage>
        <SubPage Title="Scores" Id="scores" Icon="list" >
            <GameSeriesLog Events=seriesEvents />
        </SubPage>
        <SubPage Title="Rules" Id="rules" Icon="clipboard" >
            <Rules PlayerCount=@(players.Any()? players.Count : 3) />
        </SubPage>
    </Pages>
</MainMenu>
@code {
    [Parameter]
    public int PlayerIndex { get; set; }

    [Parameter]
    public string RoomName { get; set; }

    private GameClient client;
    private ConnectionState connectionState;
    private List<GameSeriesEvent> seriesEvents;
    private List<GameEvent> events;
    private List<LobbyPlayer> players;
    private GameState State;
    private bool isLastRound;
    private bool IsRoundRunning => State is not null && !State.Turn.IsRoundOver;

    private void ResetData()
    {
        seriesEvents = new();
        events = new();
        players = new();
        State = null;
        isLastRound = false;
    }
    protected override async Task OnInitializedAsync()
    {
        ResetData();
        connectionState = ConnectionState.Connecting;
        System.Console.WriteLine($"Initializing game client for {RoomName}");
        client = new GameClient(NavigationManager.BaseUri, RoomName, PlayerIndex, 
            DispatchGameSeriesEvent, 
            DispatchGameEvent,
            PlayerUpdate,
            OnConnectionStateChanged);
        await client.StartAsync();
    }

    public void OnConnectionStateChanged(ConnectionState newState)
    {
        System.Console.WriteLine($"New connection state: {newState}");
        connectionState = newState;
        if (newState != ConnectionState.Connected)
        {
            SetAllPlayersDisconnected();
        }
        StateHasChanged();
    }

    private void SetAllPlayersDisconnected()
    {
        players = players
            .Select(p => p with { Connected = false })
            .ToList();
    }

    private async Task TryReconnect()
    {
        System.Console.WriteLine($"Attempting reconnect");
        ResetData();
        await client.StartAsync();
    }

    public void DispatchGameSeriesEvent(GameSeriesEvent e)
    {
        seriesEvents.Add(e);
        if (e is GameSeriesStarted gameSeries)
        {
            players = gameSeries.Players.Select(p => new LobbyPlayer(p.Name, p.Type, false)).ToList();
            events.Clear();
        }
        else if (e is RoundStarted round)
        {
            System.Console.WriteLine("Dispatching roundStarted " + round.Settings.StartingPlayerIndex + " " +
            round.Settings.TricksToPlay);
            State = GameState.Initial(players.Count, round.Settings);
            SetIsLastRound();
            events.Clear();
        }

        StateHasChanged();
    }

    private void SetIsLastRound()
    {
        var seriesStarted = seriesEvents.First() as GameSeriesStarted;
        var plannedRoundsCount = seriesStarted.Plan.Rounds.Count;
        var roundsStarted = seriesEvents.OfType<RoundStarted>().Count();
        isLastRound = roundsStarted == plannedRoundsCount;
    }

    public void DispatchGameEvent(GameEvent e)
    {
        System.Console.WriteLine("Dispatching " + e);
        events.Add(e);
        State = State.Dispatch(e);
        System.Console.WriteLine(State.ToString());
        StateHasChanged();
    }

    public void PlayerUpdate(CurrentLobbyPlayersDto data)
    {
        players = players
            .Select((p, i) => p with { Connected = data.PlayerConnections.Contains(i) })
            .ToList();
        StateHasChanged();
    }

    public Task PlayCardAsync(Card c) => client.PlayCard(c);
    public Task MakeGuessAsync(int guess) => client.MakeGuess(guess);
    public Task StartRoundAsync() => client.StartNextRound();

    public void Dispose()
    {
        _ = client.DisposeAsync();
    }
}