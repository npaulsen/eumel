@page "/{roomName}/{playerIndex:int}"
@using Eumel.Core.GameSeriesEvents
@using Eumel.Core
@using Microsoft.AspNetCore.SignalR.Client
@using Eumel.Client.Services
@using Eumel.Client.Components
@using Eumel.Shared.HubInterface;
@inject NavigationManager NavigationManager
@implements IDisposable

<MainMenu>
    <CustomStatus>
        @if (connectionState == ConnectionState.Connecting)
        {
            <span class="spinner-border text-warning" role="status" aria-hidden="true"></span>
        }
        else if (connectionState == ConnectionState.Connected)
        {
            <span class="oi oi-wifi text-success" />
        }
        else
        {
            <span class="oi oi-warning text-warning" />
        }
        
    </CustomStatus>
    <Pages>
        <SubPage Title="Play" Id="current-game">
            @if (players is null)
            {
                <LobbyLoadingIndicator RoomName=@RoomName />
            }
            else if (State is null)
            {
                <PreparedLobby Players=players RoomName=@RoomName OnStartClicked=StartRoundAsync />
            }
            else
            {
                <ActiveGame State=State Players=players ActivePlayer=client.PlayerIndex
                OnStartRound=StartRoundAsync OnPlayCard=PlayCardAsync OnGiveGuess=MakeGuessAsync />
            }

        </SubPage>
        <SubPage Title="Scores" Id="scores">
            <GameSeriesLog Events=seriesEvents />
        </SubPage>
        <SubPage Title="Log" Id="log">
            <table class="table">
                <tbody>
                    @foreach (var e in events)
                    {
                            <tr>
                                <td>@e</td>
                            </tr>
                    }
                </tbody>
            </table>
        </SubPage>
    </Pages>
</MainMenu>
@code {
    [Parameter]
    public int PlayerIndex { get; set; }

    [Parameter]
    public string RoomName { get; set; }
    private GameClient client;
    private ConnectionState connectionState;
    private List<GameSeriesEvent> seriesEvents = new();
    private List<GameEvent> events = new();
    private List<LobbyPlayer> players = new();
    private GameState State;

    protected override async Task OnInitializedAsync()
    {
        connectionState = ConnectionState.Connecting;
        System.Console.WriteLine($"Initializing game client for {RoomName}");
        client = new GameClient(NavigationManager.BaseUri, RoomName, PlayerIndex, 
            DispatchGameSeriesEvent, 
            DispatchGameEvent, 
            PlayerUpdate,
            OnConnectionStateChanged);
        await client.StartAsync();
    }

    public void OnConnectionStateChanged(ConnectionState newState)
    {
        System.Console.WriteLine($"New connection state: {newState}");
        connectionState = newState;
        StateHasChanged();
    }

    public void DispatchGameSeriesEvent(GameSeriesEvent e)
    {
        seriesEvents.Add(e);
        if (e is GameSeriesStarted gameSeries)
        {
            players = gameSeries.Players.Select(p => new LobbyPlayer(p.Name, p.Type, false)).ToList();
            events.Clear();
        }
        else if (e is RoundStarted round)
        {
            System.Console.WriteLine("Dispatching roundStarted " + round.Settings.StartingPlayerIndex + " " +
            round.Settings.TricksToPlay);
            State = GameState.Initial(players.Count, round.Settings);
            events.Clear();
        }

        StateHasChanged();
    }
    public void DispatchGameEvent(GameEvent e)
    {
        System.Console.WriteLine("Dispatching " + e);
        events.Add(e);
        State = State.Dispatch(e);
        System.Console.WriteLine(State.ToString());
        StateHasChanged();
    }

    public void PlayerUpdate(CurrentLobbyPlayersDto data)
    {
        players = players
            .Select((p, i) => p with { Connected = data.PlayerConnections.Contains(i) })
            .ToList();
        StateHasChanged();
    }

    public Task PlayCardAsync(Card c) => client.PlayCard(c);
    public Task MakeGuessAsync(int guess) => client.MakeGuess(guess);
    public Task StartRoundAsync() => client.StartNextRound();

    public void Dispose()
    {
        _ = client.DisposeAsync();
    }
}