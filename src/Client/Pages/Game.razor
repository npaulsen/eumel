@page "/{room}/{playerIndex:int}"
@using Eumel.Core.GameSeriesEvents
@using Eumel.Core
@using Microsoft.AspNetCore.SignalR.Client
@using Eumel.Client.Services
@using Eumel.Client.Components
@inject NavigationManager NavigationManager
@implements IDisposable

<MainMenu>
    <SubPage Title="Play" Id="current-game">
        @if (players is null)
        {
            <LobbyLoadingIndicator RoomName="@Room" />
        }
        else if (State is null)
        {
            <PreparedLobby Players=players RoomName="@Room" OnStartClicked="@StartRoundAsync" />
        }
        else
        {
            <ActiveGame State="@State" Players="@players" ActivePlayer="@client.PlayerIndex"
            OnStartRound="@StartRoundAsync" OnPlayCard="@PlayCardAsync" OnGiveGuess="@MakeGuessAsync" />
        }

    </SubPage>
    <SubPage Title="Scores" Id="scores">
        <GameSeriesLog Events="@seriesEvents" />
    </SubPage>
    <SubPage Title="Log" Id="log">
        <table class="table">
            <tbody>
                @foreach (var e in events)
                {
                        <tr>
                            <td>@e</td>
                        </tr>
                }
            </tbody>
        </table>
    </SubPage>
</MainMenu>
@code {
    [Parameter]
    public int PlayerIndex { get; set; }

    [Parameter]
    public string Room { get; set; }
    private GameClient client;
    private List<GameSeriesEvent> seriesEvents = new List<GameSeriesEvent>();
    private List<GameEvent> events = new List<GameEvent>();

    private List<PlayerInfo> players;
    private GameState State;

    protected override async Task OnInitializedAsync()
    {
        System.Console.WriteLine("Initializing game client");
        client = new GameClient(NavigationManager.BaseUri, Room, PlayerIndex, DispatchGameSeriesEvent, DispatchGameEvent);
        await client.StartAsync();
    }

    public void InitGameState(int numPlayers, EumelRoundSettings settings)
    {
        State = GameState.Initial(numPlayers, settings);
        StateHasChanged();
    }

    public void DispatchGameSeriesEvent(GameSeriesEvent e)
    {
        seriesEvents.Add(e);
        if (e is GameSeriesStarted gameSeries)
        {
            players = gameSeries.Players.ToList();
            events.Clear();
        }
        else if (e is RoundStarted round)
        {
            System.Console.WriteLine("Dispatching roundStarted " + round.Settings.StartingPlayerIndex + " " +
            round.Settings.TricksToPlay);
            State = GameState.Initial(players.Count, round.Settings);
            events.Clear();
        }

        StateHasChanged();
    }
    public void DispatchGameEvent(GameEvent e)
    {
        System.Console.WriteLine("Dispatching " + e);
        events.Add(e);
        State = State.Dispatch(e);
        System.Console.WriteLine(State.ToString());
        StateHasChanged();
    }

    public Task PlayCardAsync(Card c) => client.PlayCard(c);
    public Task MakeGuessAsync(int guess) => client.MakeGuess(guess);
    public Task StartRoundAsync() => client.StartNextRound();

    public bool IsConnected =>
    client.ConnectionState == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = client.DisposeAsync();
    }
}