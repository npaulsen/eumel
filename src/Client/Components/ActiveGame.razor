@using Eumel.Core
@namespace Eumel.Client.Components
<div>
    <div class="card border-0 mb-2">
        @if (State.Turn.IsRoundOver)
        {
            <button class="btn btn-outline-dark ml-auto" type="button" @onclick="OnShowLeaderboard">
                Scores
                <span class="oi oi-chevron-right ml-2" />
            </button>
        }
        else if (CanGuess)
        {
            <GuessInput State="@State.Players" OnGiveGuess="@OnGiveGuess" />
        }
    </div>
    <CurrentTrick Trick="@LastTrickState" PlayerNames="@Players.Select(p => p.Name).ToList()" />
    <OwnHand Hand="@PlayersHand" PlayCard="@OnPlayCard" IsTurn="@CanPlay" />
    <PlayersState Players="@Players" State="@State" />
</div>
@code {
    [Parameter]
    public GameState State { get; set; }

    [Parameter]
    public List<LobbyPlayer> Players { get; set; }

    [Parameter]
    public int ActivePlayer { get; set; }

    [Parameter]
    public bool IsLastRound { get; set; }

    [Parameter]
    public EventCallback OnStartRound { get; set; }

    [Parameter]
    public EventCallback<Card> OnPlayCard { get; set; }

    [Parameter]
    public EventCallback<int> OnGiveGuess { get; set; }

    // HACK
    [CascadingParameter]
    private MainMenu Parent { get; set; }

    private KnownHand PlayersHand;
    private bool CanGuess;
    private bool CanPlay;

    private TrickState LastTrickState;

    protected override void OnParametersSet()
    {
        SetLastTrickState();
        var isPlayer = ActivePlayer >= 0 && ActivePlayer < State.Players.Count;
        PlayersHand = isPlayer ? State.Players[ActivePlayer].Hand as KnownHand : null;
        var myTurn = isPlayer && State.Turn.PlayerIndex == ActivePlayer;
        CanGuess = State.Turn.IsGuess && myTurn;
        CanPlay = State.Turn.IsPlay && myTurn;
        base.OnParametersSet();
    }

    private void SetLastTrickState()
    {
        var nextRoundAlready = State.Turn.IsGuess || State.Turn.IsPreparing;
        if (nextRoundAlready || State.CurrentTrick.AnyPlayed)
        {
            LastTrickState = State.CurrentTrick;
        }
    }

    public void OnShowLeaderboard()
    {
        if (Parent is null)
        {
            System.Console.WriteLine("no parent mainmenu found for routing");
        }
        Parent.ActivatePageById("leaderboard");
    }
}