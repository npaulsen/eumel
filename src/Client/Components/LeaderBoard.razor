@using Eumel.Core.GameSeriesEvents
@namespace Eumel.Client.Components

<div>
    <div class="card border-0 mb-4">
        @if (IsRoundRunning || roundsPlayed < totalRounds)
        {
            <div class="btn-group ml-auto">
                <button type="button" class="btn btn-outline-dark" disabled=@(IsRoundRunning) @onclick="OnStartNextRound">
                    Start next round
                </button>
                <button type="button" class="btn btn-outline-dark" disabled=@(!IsRoundRunning) @onclick="OnShowGame">
                    Go to next round
                    <span class="oi oi-chevron-right ml-2" />
                </button>
            </div>
        }
    </div>

    <div class="card">
        <LeaderBoardRoundSwitcher TotalRounds=@totalRounds RoundsPlayed=@roundsPlayed @bind-FixedRound="FixedRound" />
        <ul class="list-group list-group-flush">
            @foreach(var player in PlayersWithPoints)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <span class="badge badge-light">+@player.Delta</span>
                    @player.Name
                    <span class="badge badge-success bg-custom">@player.Points</span>
                </li>
            }
        </ul>
    </div>
</div>

@code {
    [Parameter]
    public List<GameSeriesEvent> Events { get; set; } = new List<GameSeriesEvent>();

    [Parameter]
    public bool IsRoundRunning { get; set; }

    [Parameter]
    public EventCallback OnStartNextRound { get; set; }

    // HACK
    [CascadingParameter]
    private MainMenu Parent { get; set; }

    private List<string> _playerNames;

    private List<(string Name, int Points, int Delta)> PlayersWithPoints = new();
    private int roundsPlayed, totalRounds;

    private int? _fixedRound;
    private int? FixedRound {
        get => _fixedRound;
        set {
            _fixedRound = value;
            SetBoardEntries();
        }
    }
    private int ShownRounds => FixedRound ?? roundsPlayed;

    protected override void OnParametersSet()
    {
        if (Events.OfType<GameSeriesStarted>().Any())
        {
            var start = Events.OfType<GameSeriesStarted>().First();
            roundsPlayed = Events.OfType<RoundEnded>().Count();
            totalRounds = start.Plan.Rounds.Count;
            _playerNames = start.Players.Select(p => p.Name).ToList();
            SetBoardEntries();
        }
        
        base.OnParametersSet();
    }

    private void SetBoardEntries()
    {
        var roundEnds = Events
            .OfType<RoundEnded>()
            .Take(ShownRounds);
        
        PlayersWithPoints = _playerNames
            .Select((name, index) =>
                (name, 
                Points: roundEnds.Sum(re => re.Result.PlayerResults[index].Score),
                Delta: roundEnds.LastOrDefault()?.Result.PlayerResults[index].Score ?? 0))
            .OrderByDescending(x => x.Points)
            .ToList();
    }

    private void OnShowGame()
    {
        if (Parent is null)
        {
            System.Console.WriteLine("no parent mainmenu found for routing");
        }
        Parent.ActivatePageById("current-game");
    }
}