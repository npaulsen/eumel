@using Eumel.Core
@namespace Eumel.Client.Components

<div class="row justify-content-center">
    @foreach (var p in State.Players)
    {
        <div class="card text-center border-0">
            <div class="p-2">
                <h5 class="m-0">
                    <span class="badge @(HasTurnNow(p)?"badge-dark":"")">
                        <PlayerConnectionStatus Player=Players[p.PlayerIndex] />
                        @Players[p.PlayerIndex].Name
                    </span>
                </h5>
                <p class="card-text">
                    <span class="rounded-circle @(HasJustWon(p)?"pulse":"")">@p.TricksWon</span>
                    /
                    <span class="rounded-circle @(IsGuessingNow(p)?"pulse":"")">
                        @(p.Guess?.ToString()??"?")
                    </span>
                </p>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public GameState State { get; set; }

    [Parameter]
    public List<LobbyPlayer> Players { get; set; }

    private bool HasTurnNow(PlayerState playerState)
    => !State.Turn.IsRoundOver && State.Turn.PlayerIndex == playerState.PlayerIndex;


    private bool IsGuessingNow(PlayerState playerState)
    => State.Turn.IsGuess && State.Turn.PlayerIndex == playerState.PlayerIndex;

    private bool HasJustWon(PlayerState playerState)
    => !State.CurrentTrick.AnyPlayed
    && State.Turn.PlayerIndex == playerState.PlayerIndex
    && playerState.TricksWon > 0;

}