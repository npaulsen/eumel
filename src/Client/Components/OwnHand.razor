@using Eumel.Core
@namespace Eumel.Client.Components
@if (OrderedCards != null && OrderedCards.Any())
{
    <div class="card text-center @wrapperClass">
        <div class="card-body p-2">
            <div class="row justify-content-center">
                @foreach (var card in OrderedCards)
                {
                    
                    if (card == SelectedCard)
                    {
                        <div class="text-center rounded bg-secondary" style="cursor:pointer;" @onclick=@(() => SelectedCard = null)>
                            <div class="px-2 m-1">
                                <h1>
                                    <CardSymbol Value="@card" />
                                </h1>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="text-center border-0" style="cursor:pointer" @onclick=@(() => SelectedCard = card)>
                            <div class="px-2 m-1">
                                <h1>
                                    <CardSymbol Value="@card" />
                                </h1>
                            </div>
                        </div>
                    }
                }
            </div>
            @if (SelectedCard is not null && IsTurn)
            {
                <div class="text-center text-custom btn btn-outline-custom mt-1" style="cursor:pointer" @onclick="OnSendAsync">
                        <h5 class="m-0 p-0">
                            <span class="oi oi-share" />
                            Send
                        </h5>
                </div>
            }
            else if (IsTurn)
            {
                <h5 class="card-title mb-2 text-custom border border-white mt-1">Choose your card</h5>
            }
            else
            {
                <h5 class="card-title mb-2 border border-white mt-1">Your Hand</h5>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public KnownHand Hand { get; set; }

    private List<Card> OrderedCards;

    [Parameter]
    public bool IsTurn { get; set; }

    [Parameter]
    public EventCallback<Card> PlayCard { get; set; }

    private string wrapperClass => IsTurn ? "border-custom" : "border-0";

    private Card SelectedCard;

    private async Task OnSendAsync()
    {
        var selected = SelectedCard;
        SelectedCard = null;
        await PlayCard.InvokeAsync(selected);
    }

    protected override void OnParametersSet()
    {
        OrderedCards = Hand?.OrderByDescending(c => c)?.ToList();
        base.OnParametersSet();
    }}