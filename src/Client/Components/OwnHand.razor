@using Eumel.Core
@namespace Eumel.Client.Components
@if (OrderedCards != null && OrderedCards.Any())
{
    <div class="card text-center @wrapperClass">
        <div class="card-body p-2">
            <div class="row justify-content-center">
                @foreach (var card in OrderedCards)
                {
                    
                    if (card == _selectedCard)
                    {
                        <div class="text-center" style="cursor:pointer;" @onclick=@(() => _selectedCard = null)>
                            <div class="px-2 m-1">
                                <h1>
                                    <u>
                                        <CardSymbol Value="@card" />
                                    </u>
                                </h1>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="text-center" style="cursor:pointer" @onclick=@(() => _selectedCard = card)>
                            <div class="px-2 m-1">
                                <h1>
                                    <CardSymbol Value="@card" />
                                </h1>
                            </div>
                        </div>
                    }
                }
            </div>
            @if (!IsTurn)
            {
                <div class="text-center btn mt-1">
                        <h5 class="m-0 p-0">
                            Your Hand
                        </h5>
                </div>
            }
            else if (_selectedCard is null)
            {
                <div class="text-center text-custom btn mt-1">
                        <h5 class="m-0 p-0">
                            <span class="oi oi-arrow-circle-top" />
                            Choose your card
                        </h5>
                </div>
            }
            else if (Hand.CanPlay(_selectedCard, Trick))
            {
                <div class="text-center text-custom btn btn-outline-custom mt-1" style="cursor:pointer" @onclick="OnSendAsync">
                        <h5 class="m-0 p-0">
                            <span class="oi oi-share" />
                            Play @_selectedCard
                        </h5>
                </div>
            }
            else
            {
                <div class="text-center text-danger btn mt-1">
                        <h5 class="m-0 p-0">
                            <span class="oi oi-x" />
                            Can't play @_selectedCard
                        </h5>
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public KnownHand Hand { get; set; }

    private List<Card> OrderedCards;

    [Parameter]
    public bool IsTurn { get; set; }

    [Parameter]
    public TrickState Trick { get; set; }

    [Parameter]
    public EventCallback<Card> PlayCard { get; set; }

    private string wrapperClass => IsTurn && _selectedCard is null ? "border-custom" : "";

    private Card _selectedCard;

    private async Task OnSendAsync()
    {
        var selected = _selectedCard;
        _selectedCard = null;
        await PlayCard.InvokeAsync(selected);
    }

    protected override void OnParametersSet()
    {
        OrderedCards = Hand?.OrderByDescending(c => c)?.ToList();
        base.OnParametersSet();
    }}