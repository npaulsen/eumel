@namespace Eumel.Client.Components
<CascadingValue Value="this">
    <div class="sidebar">
        <div class="top-row pl-4 navbar navbar-dark">
            <a class="navbar-brand" href="">Eumel</a>
            @if(CustomStatus is not null)
            {
                <div id="custom-status" class="nav-info d-flex">
                    @CustomStatus
                </div>
            }
            <button class="navbar-toggler" @onclick="ToggleNavMenu">
                <span class="navbar-toggler-icon"></span>
            </button>
        </div>
        <div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
            <ul class="nav flex-column">
                @foreach (SubPage subPage in _pages)
                    {
                        <li class="nav-item px-3">
                            <a class="nav-link @GetLinkClass(subPage)" style="cursor:pointer" id="@(subPage.Id)-navlink" @onclick=@(() =>
                                                                                                                ActivatePage(subPage)) aria-controls="@(subPage.Id)" aria-selected="true">
                                <span class="oi oi-home" aria-hidden="true"></span> @subPage.Title
                            </a>
                        </li>
                    }
                </ul>
            </div>
        </div>
        <div class="main">
            <div class="top-row px-4" />
            <div class="content px-4">
                @Pages
            </div>
        </div>
    </CascadingValue>

@code {
    // Next line is needed so we are able to add <SubPage> components inside
    [Parameter]
    public RenderFragment Pages { get; set; }

    /// <summary>
    /// Optionally place a custom status indicator that is always shown (not collapsed).
    /// </summary>
    [Parameter]
    public RenderFragment CustomStatus { get; set; }

    public SubPage ActivePage { get; set; }
    
    private readonly List<SubPage> _pages = new List<SubPage>();

    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    internal void AddSubPage(SubPage subPage)
    {
        _pages.Add(subPage);
        if (_pages.Count == 1)
            ActivePage = subPage;
        StateHasChanged();
    }

    public void ActivatePageById(string pageId) {
        var page = _pages.FirstOrDefault(p => p.Id == pageId);
        if (page == null){
            Console.WriteLine($"no subpage with id '{pageId}'");
        } else {
            ActivatePage(page);
            StateHasChanged();
        }
    }

    string GetLinkClass(SubPage page)
    {
        return page == ActivePage ? "active" : "";
    }

    void ActivatePage(SubPage page)
    {
        ActivePage = page;
    }
}